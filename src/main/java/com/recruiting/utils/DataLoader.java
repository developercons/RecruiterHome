package com.recruiting.utils;

import com.recruiting.domain.*;
import com.recruiting.service.CommunicationService;
import com.recruiting.service.entity.CompanyService;
import com.recruiting.service.entity.CandidateService;
import com.recruiting.service.entity.GenericCrudService;
import org.joda.time.DateTimeUtils;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Random;

/**
 * Created by Martha on 4/26/2017.
 */
public class DataLoader {

    // region Static fields
    public static boolean temp = true;
    public static Random RANDOM = new Random();
    public static final int DELAY = 400;

    public static final Certifications[] soft = new Certifications[]{
            new Certifications("Microsoft Dynamics"),
            new Certifications("Oracle"),
            new Certifications("SAP"),
            new Certifications("QuickBooks"),
            new Certifications("NetSuite"),
            new Certifications("Sage(Peachtree)"),
            new Certifications("SAP Business One")};

    public static final Area[] AREAS = new Area[]{
            new Area("San Francisco"),
            new Area("Peninsula"),
            new Area("South Bay"),
            new Area("North Bay"),
            new Area("East Bay")};

    // region Industries

    public static final Industry[] INDUSTRIES = new Industry[]{
            new Industry("Advertising and Marketing"),
            new Industry("Aerospace and Defense"),
            new Industry("Automotive"),
            new Industry("Biotechnology"),
            new Industry("CleanTech"),
            new Industry("Consumer goods"),
            new Industry("Education"),
            new Industry("Electronics"),
            new Industry("Energy"),
            new Industry("Entertainment"),
            new Industry("Financial Services"),
            new Industry("FinTech"),
            new Industry("Healthcare"),
            new Industry("HealthTech"),
            new Industry("Information Technology"),
            new Industry("Internet"),
            new Industry("Life Scinces"),
            new Industry("Manufacturing"),
            new Industry("Media"),
            new Industry("Medical Devices"),
            new Industry("Networking"),
            new Industry("Pharmaceuticals"),
            new Industry("Real estate"),
            new Industry("Retail"),
            new Industry("SaaS"),
            new Industry("Semiconductor"),
            new Industry("Services"),
            new Industry("Social Media"),
            new Industry("Certifications"),
            new Industry("Technology"),
            new Industry("Telecommunications"),
            new Industry("Transportation and Logistics"),
            new Industry("Other")};

    // endregion

    // region SKILLS
    public static final Skill[] SKILLS = new Skill[]{
            new Skill("Accounting – Accounting Manager"),
            new Skill("Accounting – Accounts Payable"),
            new Skill("Accounting – Accounts Receivable"),
            new Skill("Accounting – Ad Hoc Projects"),
            new Skill("Accounting – Assistant Controller"),
            new Skill("Accounting – Business Combinations"),
            new Skill("Accounting – Consolidations"),
            new Skill("Accounting – Cost Accountant"),
            new Skill("Accounting – Director of Accounting"),
            new Skill("Accounting – Fixed Assets"),
            new Skill("Accounting – General Ledger Accountant"),
            new Skill("Accounting – General Ledger Manager"),
            new Skill("Accounting – International Consolidations"),
            new Skill("Accounting – Inventory"),
            new Skill("Accounting – Leases"),
            new Skill("Accounting – New Lease Standard, Implementation"),
            new Skill("Accounting – New Revenue Recognition, Implementation"),
            new Skill("Accounting – Operating Expenses"),
            new Skill("Accounting – Payroll and Benefits"),
            new Skill("Accounting – Revenue Analyst"),
            new Skill("Accounting – Revenue Analyst (Contract Accounting)"),
            new Skill("Accounting – Revenue Analyst (SaaS)"),
            new Skill("Accounting – Revenue Analyst (Certifications)"),
            new Skill("Accounting – Revenue Director"),
            new Skill("Accounting – Revenue Director (Contract Accounting)"),
            new Skill("Accounting – Revenue Director (SaaS)"),
            new Skill("Accounting – Revenue Director (Certifications)"),
            new Skill("Accounting – Revenue Manager"),
            new Skill("Accounting – Revenue Manager (Contract Accounting)"),
            new Skill("Accounting – Revenue Manager (SaaS)"),
            new Skill("Accounting – Revenue Manager (Certifications)"),
            new Skill("Accounting – Revenue Sr. Manager"),
            new Skill("Accounting – Revenue Sr. Manager (Contract Accounting)"),
            new Skill("Accounting – Revenue Sr. Manager (SaaS)"),
            new Skill("Accounting – Revenue Sr. Manager (Certifications)"),
            new Skill("Accounting – Senior Accountant"),
            new Skill("Accounting – Stock Based Compensation"),
            new Skill("Accounting – Technical Accounting Director"),
            new Skill("Accounting – Technical Accounting Manager"),
            new Skill("Accounting – Technical Accounting Sr. Associate"),
            new Skill("Accounting – Technical Accounting Sr. Manager"),
            new Skill("Financial Reporting – Cash Flow Statements"),
            new Skill("Financial Reporting – Private Company Financial Statements"),
            new Skill("FP&A – Director"),
            new Skill("FP&A – Manager"),
            new Skill("FP&A – Senior Analyst"),
            new Skill("FP&A – Sr. Manager"),
            new Skill("Internal Audit – Director"),
            new Skill("Internal Audit – Sr. Manager"),
            new Skill("Internal Audit – Manager"),
            new Skill("Internal Controls (Public) – Testing (IT Application Controls)"),
            new Skill("Internal Controls (Public) – Testing (IT General Controls)"),
            new Skill("Internal Controls (Public) – Testing (non-IT)"),
            new Skill("Internal Controls (Public) – Testing, Project Manager"),
            new Skill("Internal Controls Implementation – Process and Controls (IT Application Controls)"),
            new Skill("Internal Controls Implementation – Process and Controls (IT General Controls)"),
            new Skill("Internal Controls Implementation – Process and Controls (non-IT)"),
            new Skill("Internal Controls Implementation – Project Manager"),
            new Skill("Management – Interim CFO"),
            new Skill("Management – Interim VP of Finance"),
            new Skill("SEC Reporting – 10-K/Q, Director"),
            new Skill("SEC Reporting – 10-K/Q, Sr. Manager"),
            new Skill("SEC Reporting – 10-K/Q, Manager"),
            new Skill("SEC Reporting – 10-K/Q, Senior Associate"),
            new Skill("SEC Reporting – Other Forms (e.g. S-3, S-4, S-8)"),
            new Skill("Tax – Franchise Tax"),
            new Skill("Tax – Income Tax Provisions"),
            new Skill("Tax – Income Tax Returns"),
            new Skill("Valuations – 409A reports"),
            new Skill("Valuations – Assets other than Real Estate"),
            new Skill("Valuations – Real Estate"),
            new Skill("Other (please spcify)")};

    // endregion

    // region CITIES
    public static final String[] CITIES = new String[]{
            "Alameda",
            "Amador",
            "Butte",
            "Calaveras",
            "Colusa",
            "Contra Costa",
            "Del Norte",
            "El Dorado",
            "Fresno",
            "Fresno",
            "Glenn",
            "Humboldt",
            "Imperial",
            "Inyo",
            "Kern",
            "Kings",
            "Lake",
            "Lassen",
            "Los Angeles",
            "Madera",
            "Marin",
            "Mendocino",
            "Merced",
            "Modoc",
            "Mono",
            "Monterey",
            "Napa",
            "Nevada",
            "Orange",
            "Placer",
            "Plumas",
            "Riverside",
            "Sacramento",
            "San Benito",
            "San Bernardino",
            "San Diego",
            "San Francisco",
            "San Joaquin",
            "San Luis Obispo",
            "San Mateo",
            "Santa Barbara",
            "Santa Clara",
            "Santa Cruz",
            "Shasta",
            "Siskiyou",
            "Solano",
            "Sonoma",
            "Stanislaus",
            "Sutter",
            "Tehama",
            "Tulare",
            "Tuolumne",
            "Ventura",
            "Yolo",
            "Yuba",
            "Adelanto",
            "Agoura Hills",
            "Alameda",
            "Albany",
            "Alhambra",
            "Aliso Viejo",
            "Alturas",
            "Amador City",
            "American Canyon",
            "Anaheim",
            "Anderson",
            "Angels Camp",
            "Antioch",
            "Apple Valley",
            "Arcadia",
            "Arcata",
            "Arroyo Grande",
            "Artesia",
            "Arvin",
            "Atascadero",
            "Atherton",
            "Atwater",
            "Auburn",
            "Avalon",
            "Avenal",
            "Azusa",
            "Bakersfield",
            "Baldwin Park",
            "Banning",
            "Barstow",
            "Beaumont",
            "Bell",
            "Bell Gardens",
            "Bellflower",
            "Belmont",
            "Belvedere",
            "Benicia",
            "Berkeley",
            "Beverly Hills",
            "Big Bear Lake",
            "Biggs",
            "Bishop",
            "Blue Lake",
            "Blythe",
            "Bradbury",
            "Brawley",
            "Brea",
            "Brentwood",
            "Brisbane",
            "Buellton",
            "Buena Park",
            "Burbank",
            "Burlingame",
            "Calabasas",
            "Calexico",
            "California City",
            "Calimesa",
            "Calipatria",
            "Calistoga",
            "Camarillo",
            "Campbell",
            "Canyon Lake",
            "Capitola",
            "Carlsbad",
            "Carmel-by-the-Sea",
            "Carpinteria",
            "Carson",
            "Cathedral City",
            "Ceres",
            "Cerritos",
            "Chico",
            "Chino",
            "Chino Hills",
            "Chowchilla",
            "Chula Vista",
            "Citrus Heights",
            "Claremont",
            "Clayton",
            "Clearlake",
            "Cloverdale",
            "Clovis",
            "Coachella",
            "Coalinga",
            "Colfax",
            "Colma",
            "Colton",
            "Colusa",
            "Commerce",
            "Compton",
            "Concord",
            "Corcoran",
            "Corning",
            "Corona",
            "Coronado",
            "Corte Madera",
            "Costa Mesa",
            "Cotati",
            "Covina",
            "Crescent City",
            "Cudahy",
            "Culver City",
            "Cupertino",
            "Cypress",
            "Daly City",
            "Dana Point",
            "Danville",
            "Davis",
            "Del Mar",
            "Del Rey Oaks",
            "Delano",
            "Desert Hot Springs",
            "Diamond Bar",
            "Dinuba",
            "Dixon",
            "Dorris",
            "Dos Palos",
            "Downey",
            "Duarte",
            "Dublin",
            "Dunsmuir",
            "East Palo Alto",
            "Eastvale",
            "El Cajon",
            "El Centro",
            "El Cerrito",
            "El Monte",
            "El Segundo",
            "Elk Grove",
            "Emeryville",
            "Encinitas",
            "Escalon",
            "Escondido",
            "Etna",
            "Eureka",
            "Exeter",
            "Fairfax",
            "Fairfield",
            "Farmersville",
            "Ferndale",
            "Fillmore",
            "Firebaugh",
            "Folsom",
            "Fontana",
            "Fort Bragg",
            "Fort Jones",
            "Fortuna",
            "Foster City",
            "Fountain Valley",
            "Fowler",
            "Fremont",
            "Fresno",
            "Fullerton",
            "Galt",
            "Garden Grove",
            "Gardena",
            "Gilroy",
            "Glendale",
            "Glendora",
            "Goleta",
            "Gonzales",
            "Grand Terrace",
            "Grass Valley",
            "Greenfield",
            "Gridley",
            "Grover Beach",
            "Guadalupe",
            "Gustine",
            "Half Moon Bay",
            "Hanford",
            "Hawaiian Gardens",
            "Hawthorne",
            "Hayward",
            "Healdsburg",
            "Hemet",
            "Hercules",
            "Hermosa Beach",
            "Hesperia",
            "Hidden Hills",
            "Highland",
            "Hillsborough",
            "Hollister",
            "Holtville",
            "Hughson",
            "Huntington Beach",
            "Huntington Park",
            "Huron",
            "Imperial",
            "Imperial Beach",
            "Indian Wells",
            "Indio",
            "Industry",
            "Inglewood",
            "Ione",
            "Irvine",
            "Irwindale",
            "Isleton",
            "Jackson",
            "Jurupa Valley",
            "Kerman",
            "King City",
            "Kingsburg",
            "La Cañada Flintridge",
            "La Habra",
            "La Habra Heights",
            "La Mesa",
            "La Mirada",
            "La Palma",
            "La Puente",
            "La Quinta",
            "La Verne",
            "Lafayette",
            "Laguna Beach",
            "Laguna Hills",
            "Laguna Niguel",
            "Laguna Woods",
            "Lake Elsinore",
            "Lake Forest",
            "Lakeport",
            "Lakewood",
            "Lancaster",
            "Larkspur",
            "Lathrop",
            "Lawndale",
            "Lemon Grove",
            "Lemoore",
            "Lincoln",
            "Lindsay",
            "Live Oak",
            "Livermore",
            "Livingston",
            "Lodi",
            "Loma Linda",
            "Lomita",
            "Lompoc",
            "Long Beach",
            "Loomis",
            "Los Alamitos",
            "Los Altos",
            "Los Altos Hills",
            "Los Angeles",
            "Los Banos",
            "Los Gatos",
            "Loyalton",
            "Lynwood",
            "Madera",
            "Malibu",
            "Mammoth Lakes",
            "Manhattan Beach",
            "Manteca",
            "Maricopa",
            "Marina",
            "Martinez",
            "Marysville",
            "Maywood",
            "McFarland",
            "Mendota",
            "Menifee",
            "Menlo Park",
            "Merced",
            "Mill Valley",
            "Millbrae",
            "Milpitas",
            "Mission Viejo",
            "Modesto",
            "Monrovia",
            "Montague",
            "Montclair",
            "Monte Sereno",
            "Montebello",
            "Monterey",
            "Monterey Park",
            "Moorpark",
            "Moraga",
            "Moreno Valley",
            "Morgan Hill",
            "Morro Bay",
            "Mount Shasta",
            "Mountain View",
            "Murrieta",
            "Napa",
            "National City",
            "Needles",
            "Nevada City",
            "Newark",
            "Newman",
            "Newport Beach",
            "Norco",
            "Norwalk",
            "Novato",
            "Oakdale",
            "Oakland",
            "Oakley",
            "Oceanside",
            "Ojai",
            "Ontario",
            "Orange",
            "Orange Cove",
            "Orinda",
            "Orland",
            "Oroville",
            "Oxnard",
            "Pacific Grove",
            "Pacifica",
            "Palm Desert",
            "Palm Springs",
            "Palmdale",
            "Palo Alto",
            "Palos Verdes Estates",
            "Paradise",
            "Paramount",
            "Parlier",
            "Pasadena",
            "Paso Robles",
            "Patterson",
            "Perris",
            "Petaluma",
            "Pico Rivera",
            "Piedmont",
            "Pinole",
            "Pismo Beach",
            "Pittsburg",
            "Placentia",
            "Placerville",
            "Pleasant Hill",
            "Pleasanton",
            "Plymouth",
            "Point Arena",
            "Pomona",
            "Port Hueneme",
            "Porterville",
            "Portola",
            "Portola Valley",
            "Poway",
            "Rancho Cordova",
            "Rancho Cucamonga",
            "Rancho Mirage",
            "Rancho Palos Verdes",
            "Rancho Santa Margarita",
            "Red Bluff",
            "Redding",
            "Redlands",
            "Redondo Beach",
            "Redwood City",
            "Reedley",
            "Rialto",
            "Richmond",
            "Ridgecrest",
            "Rio Dell",
            "Rio Vista",
            "Ripon",
            "Riverbank",
            "Riverside",
            "Rocklin",
            "Rohnert Park",
            "Rolling Hills",
            "Rolling Hills Estates",
            "Rosemead",
            "Roseville",
            "Ross",
            "Sacramento",
            "St. Helena",
            "Salinas",
            "San Anselmo",
            "San Bernardino",
            "San Bruno",
            "San Carlos",
            "San Clemente",
            "San Diego",
            "San Dimas",
            "San Fernando",
            "San Francisco",
            "San Gabriel",
            "San Jacinto",
            "San Joaquin",
            "San Jose",
            "San Juan Bautista",
            "San Juan Capistrano",
            "San Leandro",
            "San Luis Obispo",
            "San Marcos",
            "San Marino",
            "San Mateo",
            "San Pablo",
            "San Rafael",
            "San Ramon",
            "Sand City",
            "Sanger",
            "Santa Ana",
            "Santa Barbara",
            "Santa Clara",
            "Santa Clarita",
            "Santa Cruz",
            "Santa Fe Springs",
            "Santa Maria",
            "Santa Monica",
            "Santa Paula",
            "Santa Rosa",
            "Santee",
            "Saratoga",
            "Sausalito",
            "Scotts Valley",
            "Seal Beach",
            "Seaside",
            "Sebastopol",
            "Selma",
            "Shafter",
            "Shasta Lake",
            "Sierra Madre",
            "Signal Hill",
            "Simi Valley",
            "Solana Beach",
            "Soledad",
            "Solvang",
            "Sonoma",
            "Sonora",
            "South El Monte",
            "South Gate",
            "South Lake Tahoe",
            "South Pasadena",
            "South San Francisco",
            "Stanton",
            "Stockton",
            "Suisun City",
            "Sunnyvale",
            "Susanville",
            "Sutter Creek",
            "Taft",
            "Tehachapi",
            "Tehama",
            "Temecula",
            "Temple City",
            "Thousand Oaks",
            "Tiburon",
            "Torrance",
            "Tracy",
            "Trinidad",
            "Truckee",
            "Tulare",
            "Tulelake",
            "Turlock",
            "Tustin",
            "Twentynine Palms",
            "Ukiah",
            "Union City",
            "Upland",
            "Vacaville",
            "Vallejo",
            "Ventura",
            "Vernon",
            "Victorville",
            "Villa Park",
            "Visalia",
            "Vista",
            "Walnut",
            "Walnut Creek",
            "Wasco",
            "Waterford",
            "Watsonville",
            "Weed",
            "West Covina",
            "West Hollywood",
            "West Sacramento",
            "Westlake Village",
            "Westminster",
            "Westmorland",
            "Wheatland",
            "Whittier",
            "Wildomar",
            "Williams",
            "Willits",
            "Willows",
            "Windsor",
            "Winters",
            "Woodlake",
            "Woodland",
            "Woodside",
            "Yorba Linda",
            "Yountville",
            "Yreka",
            "Yuba City",
            "Yucaipa",
            "Yucca Valley"
    };

    // endregion

    // region STREETS
    public static final String[] STREETS = new String[]{
            "Abbey Dr",
            "Achilles Ct",
            "Adams Ave",
            "Addie Way",
            "Adelaide Dr",
            "Adler Dr",
            "Adonis St",
            "Agate Dr",
            "Al Pl",
            "Alamo Dr",
            "Alba Ct",
            "Albano St",
            "Alcorn Way",
            "Aldi Ct",
            "Alejandro Rd",
            "Algonquin Ave",
            "Alicia Ct",
            "Allen Ave",
            "Alnoor Dr",
            "Alona Rd",
            "Alondra Ct",
            "Alondra Dr",
            "Alpha St",
            "Altura Pl",
            "Alva Ct",
            "Amapala Ct",
            "Amapola Ave",
            "Ambrose St",
            "Amelia Ave",
            "American Ct",
            "Amethist St",
            "Amherst Ct",
            "Amparo Way",
            "Amyjane Way",
            "Ana Ct",
            "Anderson Ct",
            "Andre Ct",
            "Angel Ct",
            "Anglin Ave",
            "Anita Bogan Ct",
            "Antelope Ct",
            "Antelope E Dr",
            "Antelope W Dr",
            "Antigua N Dr",
            "Antoinette Ln",
            "Apache Dr",
            "Apaloosa Ave",
            "Applewood Dr",
            "Aquamarine St",
            "Aquarius St",
            "Arca Ct",
            "Arca Ln",
            "Arca St",
            "Arcadia St",
            "Arden Ave",
            "Ardith Ave",
            "Ariade St",
            "Arias Ln",
            "Aries Ave",
            "Aristotle Dr",
            "Arizmendi Dr",
            "Arizona Ave",
            "Arturo Ct",
            "Aspen Mall",
            "Aster Dr",
            "Aster Way E",
            "Aster Way W",
            "Audrey Ct",
            "Ava Ct",
            "Avalon Ave",
            "Avant Ct",
            "Aztemis Ave",
            "Bader Ct",
            "Bailey Way",
            "Baldwin Ln",
            "Ballard St",
            "Bancroft Ct",
            "Bandara St",
            "Barbara Way",
            "Barclay Ave",
            "Barker St",
            "Baron Blvd",
            "Barracuda Ct",
            "Barry Ct",
            "Barry Dr E",
            "Barry Pl",
            "Bates Ave",
            "Bates Way",
            "Batz St",
            "Beachwood Ave",
            "Beadles Ave",
            "Bedford Pl",
            "Beech Pl",
            "Beeman St",
            "Beemon St",
            "Belle St",
            "Belon Dr",
            "Belon Pl",
            "Bennington Ct",
            "Bent Ct",
            "Bentham St",
            "Berendo Dr",
            "Berkeley Dr",
            "Berkman Dr",
            "Bern Pl",
            "Bernette Dr",
            "Bernice Ln",
            "Berry St",
            "Bersal St",
            "Bert Ln",
            "Bestwick Ave",
            "Bigelow Ave",
            "Birkholme Dr",
            "Biscayne Ave",
            "Blythe Pl",
            "Bobbie Ct",
            "Bobbie Ln",
            "Bolden Dr",
            "Bond Ct",
            "Bong Ct",
            "Bonneville Ave",
            "Bragg Ave",
            "Bratt Ave",
            "Brian Ct",
            "Brian Ln",
            "Brianna St",
            "Bridle Ave",
            "Brigitie Dr",
            "Brooks St",
            "Brown Rd",
            "Bruce Ave",
            "Bucknell Rd",
            "Buckskin Ave",
            "Buena Ventura Ct",
            "Buena Ventura Dr",
            "Buena Ventura Pl",
            "Buick Blvd",
            "Burr Ave",
            "Burr Ct",
            "Burr Ln",
            "Bymar Dr",
            "Byron St",
            "Cajon Dr",
            "Calas Ct",
            "Calhoun Ct",
            "Calhoun Dr",
            "Caliente Way",
            "Calvin Cir",
            "Cambridge St",
            "Camero Ct",
            "Camero Dr",
            "Camero Pl",
            "Cameron Way",
            "Camille Ct",
            "Camp Fire Ct",
            "Camp Fire Dr",
            "Caplan St",
            "Capricorn Ave",
            "Carl Dr",
            "Carlos Dr",
            "Carlota St",
            "Carmel Ave",
            "Carmelita Ave",
            "Carmen St",
            "Carnation Dr",
            "Carole Way",
            "Carson Dr",
            "Carton Way",
            "Caspio Ct",
            "Caspio St",
            "Caspio Way",
            "Catalina St",
            "Catalpa Ave",
            "Catherina Dr",
            "Cecil Ct",
            "Cecil Pl",
            "Cecily Way",
            "Charlotte Way",
            "Chateau N Dr",
            "Chateau S Dr",
            "Chati Ct",
            "Chati St",
            "Checker Ct",
            "Chellin Way",
            "Cheryl Ave",
            "Chevelle Ave",
            "Childs Ave",
            "Chino St",
            "Christie Dr",
            "Christina Dr",
            "Christopher Dr",
            "Churchill St",
            "Cindy Ct",
            "Cindy Ln",
            "Cindy Pl",
            "Cindy Way",
            "Cio Ct",
            "Cisco Pl",
            "Citrus Ave",
            "Claar Ct",
            "Claar Dr",
            "Claar Pl",
            "Claar Way",
            "Claremont",
            "Claremont St",
            "Clarence Ct",
            "Clarence St",
            "Clay Ct",
            "Cliff Ct",
            "Clostermen Ct",
            "Clover Dr",
            "Cloves Ct",
            "Coleman St",
            "Colgate Rd",
            "Colliins St",
            "Columbia Rd",
            "Columbine Ave",
            "Congreve Ct",
            "Conklin Blvd",
            "Conklin Ct",
            "Cooper Dr",
            "Corinne Ct",
            "Cornell Ct",
            "Corregidor Dr",
            "Corwin St",
            "Cosca Ct",
            "Cosca Dr",
            "Cosca Pl",
            "Cox Dr",
            "Crab Apple Ln",
            "Craig Ave",
            "Craig St",
            "Crawford Dr",
            "Crest Rd",
            "Cronin Ct",
            "Crossfield Ct",
            "Crowley St",
            "Cruz Pl",
            "Cullen Ave",
            "Cupp Ct",
            "Curnette Ct",
            "Curtis Pl",
            "Cutler St",
            "Da Vinci Pl",
            "Dale Ave",
            "Daneen Ct",
            "Daneen Pl",
            "Daneen St",
            "Dante Ave",
            "Dario Pl",
            "Darlin Way",
            "Darrel Ave",
            "Darrel Ct",
            "Darrow Dr",
            "Darwin Dr",
            "Date Cir",
            "David Pl",
            "David St",
            "David Way",
            "De Anna St",
            "Dean Ct",
            "Dean Dr",
            "Debbie Ct",
            "Debbie Dr",
            "Debbie Way",
            "Deborah Ave",
            "Decatur Ave",
            "Deep Well St",
            "Dehaviland Ct",
            "Deka Pl",
            "Delia Ct",
            "Delia St",
            "Demetria Ct",
            "Denhart Ave",
            "Denstone Ct",
            "Derby Pl",
            "Desert Breeze Dr",
            "Desoto Ct",
            "Diane Pl",
            "Dickson Way",
            "Doane Ct",
            "Dockings Ln",
            "Dodge Ct",
            "Doll Ave",
            "Dolphin Ct",
            "Don Ct",
            "Don Dr",
            "Don Ln",
            "Don Pl",
            "Don Way",
            "Doolittle Pl",
            "Doran Ct",
            "Doran Dr",
            "Doran Ln",
            "Doran Pl",
            "Doran Way",
            "Doris Slater Ct",
            "Doriselle Ave",
            "Douglas",
            "Douvier Way",
            "Downing Ct",
            "Downing Dr",
            "Downing Pl",
            "Downing Way",
            "Doyle",
            "Drechsler Dr",
            "Drew Ct",
            "Duane St",
            "Dublin Ct",
            "Dunes Ave",
            "Dunsmuir Dr",
            "Duquesne St",
            "Earhart Ct",
            "East Ave",
            "Ecuador Ln",
            "Edna Ct",
            "Edsel Ave",
            "Eileen Blvd",
            "Eileen Ct",
            "El Bolero Dr",
            "El Prado Rd",
            "Elcomb N Dr",
            "Elcomb S Dr",
            "Eleanor St",
            "Electra Ct",
            "Electra Dr",
            "Elida Dr",
            "Elina Dr",
            "Elinor Ct",
            "Elmyra Dr",
            "Emerald St",
            "Emilio Dr",
            "Emory Rd",
            "Erich Ct",
            "Ernest Way",
            "Ervin Way",
            "Erwin Ct",
            "Estrada Pl",
            "Eucalyptus Ave",
            "Eugene St",
            "Eunice Way",
            "Everett Ct",
            "Everett Dr",
            "Evergreen Ave",
            "Exeter Ct",
            "Fabienne Way",
            "Fair Ct",
            "Fairlane Dr",
            "Fairview Ave",
            "Falcon Ave",
            "Fareholm Dr",
            "Farman Pl",
            "Farrow Ave",
            "Fattaleh Ave",
            "Fattaleh Ct",
            "Fattaleh Ln",
            "Fay Ct",
            "Feldspar Ct",
            "Feldspar Dr",
            "Fenmore Dr",
            "Fern Ct",
            "Fernwood Ave",
            "Ferris Ave",
            "Fiat Ct",
            "Field Way",
            "Fileen Ct",
            "Fisk Ave",
            "Flaming Pl",
            "Flanner Ave",
            "Florence Way",
            "Flores Dr",
            "Flores St",
            "Foothill Rd",
            "Fordman Ct",
            "Forest Blvd",
            "Forman St",
            "Fowler Rd",
            "Frances Dr",
            "Francobe Dr",
            "Frank Cir",
            "Frederika Dr",
            "Freeman Ln",
            "Fremont Dr",
            "Friendship Ct",
            "Frost Ct",
            "Frost Dr",
            "Frost Ln",
            "Frost Pl",
            "Fry Ct",
            "Fulton St",
            "Fumi Way",
            "Furman St",
            "Fury Ct",
            "Gable Way",
            "Gabreski Ct",
            "Gabriel Dr",
            "Gail Ct",
            "Galaxie Ave",
            "Galina Ave",
            "Galveston Ct",
            "Galvezton Ave",
            "Gan Ct",
            "Gantt Rd",
            "Garibaldi Ct",
            "Garnett Ave",
            "Garrett Ct",
            "Gary Ct",
            "Gaza Dr",
            "Geer Ct",
            "George Blvd",
            "George Ct",
            "Georgetown St",
            "Georgette Pl",
            "Gerard Ave",
            "Giga Ct",
            "Giga St",
            "Gilbert Pl",
            "Gilmore St",
            "Glade Ave",
            "Glen Rd",
            "Glenhaven Dr",
            "Glenwood Ct",
            "Gloria Dr",
            "Gold Pl",
            "Gold Rush Ave",
            "Golden Ave",
            "Gordon Blvd",
            "Gotha Ct",
            "Grail Ave",
            "Granada Dr",
            "Granite Dr",
            "Granite E Dr",
            "Granite W Dr",
            "Grant Rd",
            "Grapewood Ave",
            "Grayson St",
            "Great Cir Dr",
            "Greeley Dr",
            "Greenwood Ave",
            "Greg Ct",
            "Greg Dr",
            "Greg Ln",
            "Greg Pl",
            "Greg Terrace",
            "Greg Way",
            "Griffith Ct",
            "Griffith Pl",
            "Griffith Way",
            "Grove Ave",
            "Grumman Dr",
            "Guinevere St",
            "Gull Ct",
            "Guynemer Ct",
            "Hacienda Blvd",
            "Hamilton Way",
            "Hanover Dr",
            "Hans Blvd",
            "Hansen St",
            "Happy Hour Dr",
            "Hargett Dr",
            "Hargett Pl",
            "Hargett Way",
            "Harman Way",
            "Hart Ct",
            "Hart St",
            "Hasen Ave",
            "Hassel Ct",
            "Haver Ave",
            "Hayden Ct",
            "Heather Pl",
            "Heffley St",
            "Heidi Dr",
            "Helen Ave",
            "Helton Ave",
            "Henning Way",
            "Henry Ave",
            "Herbert Ct",
            "Heron Pl",
            "Hexa Ct",
            "Hickory Dr",
            "Hidalgo Dr",
            "Highland Dr",
            "Hillman Dr",
            "Holdame St",
            "Holl Ct",
            "Holly Ave",
            "Holt Ct",
            "Honeymoon Ln",
            "Honeymoon Way",
            "Hooker Ct",
            "Horizon Way",
            "Hossler St",
            "Houlihan Ave",
            "Hover Pl",
            "Howard Dr",
            "Hudson Ct",
            "Hugo Way",
            "Hula Ct",
            "Humber Ave",
            "Hume Ave",
            "Hunt Dr",
            "Hutton Ct",
            "Hutton Dr",
            "Icaarus Ct",
            "Ila Ln",
            "Impala Ave",
            "Inez St",
            "Innes Dr",
            "Iron Ct",
            "Irone Pl",
            "Ives Ct",
            "Ives Dr",
            "Jacaranda Ave",
            "Jackson Pl",
            "Jacob Way",
            "Jade Way",
            "James Ave",
            "James Dr",
            "Jamison St",
            "Jane Dr",
            "Jane Pl",
            "Jane Won Ln",
            "Jason Dr",
            "Jay Ave",
            "Jayes Ct",
            "Jazmine Dr",
            "Jeffry St",
            "Jennifer Ave",
            "Jennifer Way",
            "Jensen St",
            "Jeremy Ct",
            "Jeremy Dr",
            "Jethro St",
            "Jewell Way",
            "Jill Ave",
            "Jimson Ave",
            "Joan Ct",
            "Johanna Dr",
            "John Ave",
            "Jones Way",
            "Joseph Ct",
            "Joycestone Pl",
            "Juan Dr",
            "Jubilate St",
            "Judith Ln",
            "Judy Ct",
            "Judy Dr",
            "Judy Pl",
            "Judy Terrace",
            "Julian St",
            "Julliard St",
            "June Ct",
            "Jupiter Pl",
            "Kalmia Ave",
            "Kamal Ln",
            "Karen St",
            "Karia Ct",
            "Karlene Dr",
            "Kast Ct",
            "Kaufmes Ct",
            "Kaufmes Dr",
            "Kay Ct",
            "Keefe Ave",
            "Keeley Ct",
            "Keller Ct",
            "Keller Dr",
            "Kendall St",
            "Kennedy Blvd",
            "Kenniston Rd",
            "Kentiner Rd",
            "Kenwood Dr",
            "Kern Dr",
            "Kevin Ct",
            "Kevin St",
            "Keynes St",
            "Kimron Way",
            "Kingston Ave",
            "Kirby Dr",
            "Kirby Pl",
            "Kirby Terrace",
            "Kirby Way",
            "Kirk Ct",
            "Kirsch Way",
            "Kitten Ct",
            "Kitten Pl",
            "Kitten Way",
            "Klamath St",
            "Klara Ave",
            "Klassette St",
            "Kley Ct",
            "Kley Dr",
            "Kley Pl",
            "Knoll Crest",
            "Knoll Dr",
            "Koa Ct",
            "Kramer Dr",
            "Kumquat Ln",
            "Kush Way",
            "La Habra Ave",
            "La Salle St",
            "La Vista Ave",
            "Labrecque Ave",
            "Ladd Ave",
            "Lake Shore Dr",
            "Lamar Way",
            "Lance Ct",
            "Lance Way",
            "Landau Ave",
            "Landis Dr",
            "Laranne St",
            "Larry Ave",
            "Larsen Dr",
            "Lassen Ln",
            "Laura Ave",
            "Layton Dr",
            "Le Conte St",
            "Le Sabre Dr",
            "Leath St",
            "Lecha Ln",
            "Leconte St",
            "Leda Ct",
            "Leiman Rd",
            "Lena Dr",
            "Leonard Dr",
            "Leticia Ave",
            "Lewis Ave",
            "Lila Dr",
            "Lila Pl",
            "Lilian St",
            "Lilienthal Ct",
            "Lindbergh Pl",
            "Linfield Ave",
            "Lingayeu Ave",
            "Linsfield Ave",
            "Lipari Ct",
            "Lipari Ln",
            "Lipari Pl",
            "Lipari W Dr",
            "Locust Ln",
            "Logan Dr",
            "Lois Dr",
            "Lola Ct",
            "Lola Pl",
            "Lola St",
            "Lola Way",
            "Long Ct",
            "Longworthy St",
            "Lookout Dr",
            "Lopez St",
            "Loreta Way",
            "Lorien Ct",
            "Lorien Dr",
            "Louise Ave",
            "Louise Ct",
            "Lucile Dr",
            "Lucky Way",
            "Luella Way",
            "Lufbery Pl",
            "Luke Ct",
            "Lunen Ln",
            "Lunen Pl",
            "Lunen St",
            "Lunen Way",
            "Lupine Loop Dr",
            "Luzern Pl",
            "Luzon Dr",
            "Lydia Dr",
            "Lyman Dr",
            "Lyn St",
            "Lynda Ave",
            "M Ct",
            "Mace Ave",
            "Mace Ln",
            "Mace Way",
            "Mack St",
            "Magdalena St",
            "Maler Ct",
            "Maler Dr",
            "Maler Pl",
            "Maler Way",
            "Malu Ct",
            "Manzanita Ave",
            "Marcelina Ct",
            "Marcus Ave",
            "Marcy Ct",
            "Margaret Ct",
            "Marie Ct",
            "Marilyn Ct",
            "Marilyn Dr",
            "Mario Ave",
            "Marion Dr",
            "Mark Dr",
            "Mark Pl",
            "Mark Way",
            "Marmot St",
            "Marrow Ave",
            "Marte St",
            "Martin",
            "Martin Dr",
            "Mary Lee Ave",
            "Marymount St",
            "Mason Ct",
            "Mathena Ave",
            "Mathena Ct",
            "Mathena Ln",
            "Mathena Pl",
            "Matick Dr",
            "Maureen Ave",
            "Maverick St",
            "Mc Donald Dr",
            "Mcintosh Way",
            "Medaro Way",
            "Medio St",
            "Melina Dr",
            "Melinda Ct",
            "Mellie Ct",
            "Mellie Dr",
            "Mellow Dr",
            "Melville Dr",
            "Mendiburu Rd",
            "Mercury Dr",
            "Merkel Ct",
            "Merrick Blvd",
            "Merrill St",
            "Michael Ct",
            "Midland Dr",
            "Mike Dr",
            "Mildred St",
            "Miller Dr",
            "Milner Dr",
            "Mind St",
            "Minlow Dr",
            "Miranda Dr",
            "Mitchell Blvd",
            "Mitzie Ave",
            "Modesty Dr",
            "Moe Pl",
            "Mojave Dr",
            "Mollison Ct",
            "Mollue Dr",
            "Monsella Ct",
            "Moon Ave",
            "Morgan Ave",
            "Morning Glory Ct",
            "Morning Glory Dr",
            "Morris St",
            "Morry St",
            "Muhenberg Ave",
            "Muir Ave",
            "Munoz St",
            "Murvin Ave",
            "Myrna Pl",
            "N Charlene Pl",
            "N Garibaldi Dr",
            "N Loop Blvd",
            "N Pebble Blvd",
            "Nadia Ave",
            "Nadia Ln",
            "Namath Dr",
            "Nancy Way",
            "Napial Ct",
            "Nase Ct",
            "Nase Pl",
            "Nase St",
            "Nazareno Ct",
            "Nazareno Dr",
            "Neff Ct",
            "Neff Dr",
            "Neil Ct",
            "Nelda Blvd",
            "Nelly Dr",
            "Nelson Dr",
            "Nena Ct",
            "Nena Pl",
            "Neuralia",
            "New Ct",
            "Nichol Dr",
            "Nickles Ave",
            "Nielsen Way",
            "Nilton St",
            "Nolen Ct",
            "Nora Dr",
            "Norbury St",
            "Norton St",
            "Norwich Ct",
            "Notre Dame Rd",
            "Nunnelee Dr",
            "Oberlin Ct",
            "Odette Ct",
            "Odis Ct",
            "Odis Dr",
            "Oldsmobile Blvd",
            "Oleander Ave",
            "Olindo St",
            "Oliver Ave",
            "Olivetti St",
            "Olivo Dr",
            "Olson Ct",
            "Olson St",
            "Omar Way",
            "Omita Ct",
            "Oonella Way",
            "Opel St",
            "Orchid Dr",
            "Orlando Dr",
            "Orosco Ave",
            "Orr Ct",
            "Orville Wright Ct",
            "Otelia Ct",
            "Otelia Dr",
            "Otis Way",
            "Owens Dr",
            "Owl Pl",
            "Pablinas Dr",
            "Packard Way",
            "Paine St",
            "Palisades Blvd",
            "Palm Ct",
            "Palm Dr",
            "Palomino Way",
            "Panamint Ln",
            "Parks Ct",
            "Parks Dr",
            "Parks Pl",
            "Passantino St",
            "Patricia St",
            "Paul Ct",
            "Paul Dr",
            "Paul Pl",
            "Pauline Ct",
            "Peach Ave",
            "Pearl Dr",
            "Pearl Pl",
            "Pecan Ct",
            "Pedlow Ave",
            "Peg Ct",
            "Pelon Pl",
            "Pelto Ct",
            "Pembroke Ave",
            "Penny Ln",
            "Penta Ct",
            "Penta Dr",
            "Penta Way",
            "Pepe Ct",
            "Pepperdine St",
            "Percy Way",
            "Perkins Ave",
            "Perkins Ct",
            "Pesch Blvd",
            "Peter Dr",
            "Petit Dr",
            "Philip Ave",
            "Phylrich St",
            "Pico Pl",
            "Piedmont St",
            "Pierce Cir",
            "Pilipinas Ave",
            "Pinto Ct",
            "Piper Pl",
            "Plane St",
            "Planet Dr",
            "Planet Ln",
            "Planet Pl",
            "Planet Way",
            "Playa Del Sol N Dr",
            "Playa Del Sol S Dr",
            "Pluto Ave",
            "Plymouth Way",
            "Pobute Ave",
            "Point Ave",
            "Poly St",
            "Pomona St",
            "Pontiac Ave",
            "Poole Ct",
            "Poole Pl",
            "Poran Ct",
            "Post Ct",
            "Pratt Ave",
            "Preciados St",
            "Preston Ct",
            "Price Ct",
            "Prime Ct",
            "Primera Dr",
            "Priss Way",
            "Proctor Ct",
            "Putter Ct",
            "Quail Ct",
            "Quay St",
            "Queen Ave",
            "Queens Ct",
            "Quick Dr",
            "Quincy Ave",
            "Quinto Dr W",
            "Quinto E Dr",
            "R Ct",
            "Rafael Pl",
            "Rambler Way",
            "Rancho Ct",
            "Ransburg Cutoff Rd",
            "Ray Ct",
            "Ray Pl",
            "Rayburn Dr",
            "Raymond Ave",
            "Rea Ave",
            "Redwood Blvd",
            "Reed Pl",
            "Reese Ct",
            "Regis St",
            "Reinicke Ct",
            "Reinicke Way",
            "Reitz Dr",
            "Reitz Pl",
            "Remos Ct",
            "Remuda Ct",
            "Rena Dr",
            "Renault Ct",
            "Rex Ct",
            "Rice Ave",
            "Rickenbacker Ct",
            "Ricker St",
            "Rickthofen Ct",
            "Ridge Blvd",
            "Riedel Ct",
            "Riedel Dr",
            "Rimpan Dr",
            "Rimpan St",
            "Rincon Way",
            "Rita Pl",
            "Roan St",
            "Rob Ave",
            "Robamba Pl",
            "Roberth Dr",
            "Robey Ct",
            "Robey Dr",
            "Robey Ln",
            "Robey Pl",
            "Robey Terrace",
            "Robey Way",
            "Rock Ave",
            "Rodeo Way",
            "Rodgers Way",
            "Rodriguez Ct",
            "Rolland Dr",
            "Rome Beauty Dr",
            "Romeo Ave",
            "Rommel Ave",
            "Ronnie Way",
            "Roos Pl",
            "Roosevelt Dr",
            "Rothrock Ave",
            "Rowend Dr",
            "Roxanne St",
            "Roxbury St",
            "Rudnick Blvd",
            "Rupel Way",
            "Rusche Blvd",
            "Russel Ct",
            "Russel Dr",
            "Russel Pl",
            "Ryan Ave",
            "S Charlene Pl",
            "S College Blvd",
            "S Columbia Rd",
            "S Garibaldi Dr",
            "S Loop Blvd",
            "S Powell St",
            "Sage Dr",
            "Sage Pl",
            "Sajer Ct",
            "Salem Ave",
            "Sally Ct",
            "Samy Dr",
            "San Bruno Ct",
            "San Carlos St",
            "San Jose St",
            "San Marcos Dr",
            "Sanborn St",
            "Sand Ct",
            "Sandtrap Ct",
            "Sandy Ave",
            "Sandy Ct",
            "Santos Dumont Ct",
            "Saratoga St",
            "Satinwood Ave",
            "Saturn Ave",
            "Saturno Dr",
            "Saunders Blvd",
            "Savoy Dr",
            "Schaefer Ave",
            "Schneider Ln",
            "Schroeder St",
            "Sean Dr",
            "Sease Ct",
            "Sease St",
            "Sefton St",
            "Seidman St",
            "Sena Dr",
            "Senia St",
            "Seversky Pl",
            "Shames Ct",
            "Shaw St",
            "Sheila Dr",
            "Shelton Dr",
            "Shepard Pl",
            "Sheridan Ct",
            "Sheridan St",
            "Shermak Dr",
            "Sherman Pl",
            "Shirley Dr",
            "Shirley Pl",
            "Short Way",
            "Sierra Rd",
            "Sierra Vista Ln",
            "Sierra Vista Pl",
            "Silver Ln",
            "Simca Way",
            "Simpao Ave",
            "Simpson Way",
            "Singer Way",
            "Sioux Ct",
            "Sioux Dr",
            "Sioux Way",
            "Sipin Pl",
            "Sir Alan Ct",
            "Sir Alan Dr",
            "Sizer Pl",
            "Ski Ave",
            "Skylark Ct",
            "Sloan Dr",
            "Solan Ct",
            "Solan Dr",
            "Solan Pl",
            "Solan Way",
            "Sonny Ct",
            "Sonny Ln",
            "Sorens Dr",
            "Sorensen St",
            "Southmont St",
            "Spad Ct",
            "Speranza Dr",
            "Spooner Ct",
            "Sprint Ct",
            "Spurs Ave",
            "Stacy St",
            "Staggs St",
            "Stallion Ave",
            "Stan Ct",
            "Stanford Ave",
            "Stanley St",
            "Star Way",
            "Starla Dr",
            "Starla Pl",
            "Steward Ct",
            "Stewart Ct",
            "Stonecrop St",
            "Strum Dr",
            "Studebaker St",
            "Suffolk Ave",
            "Sun Ave",
            "Sundowner Way",
            "Surlin St",
            "Susan Ave",
            "Susan Ct",
            "Sutherland Ct",
            "Sutters Fort Rd",
            "Sycamore Ave",
            "Sylmar Pl",
            "Sylvester St",
            "Sylvie Ln",
            "Tabor Ct",
            "Tackett Dr",
            "Tag Dr",
            "Tamarack Dr",
            "Tammy Ct",
            "Tanbark Ave",
            "Tara Pl",
            "Tator Way",
            "Tawney St",
            "Temp Ln",
            "Temple St",
            "Tempst Ct",
            "Tennyson St",
            "Tetra Ave",
            "Thayeri Ave",
            "Theophilis St",
            "Thiel Rd",
            "Thomas St",
            "Thunderbird Blvd",
            "Tift Cir",
            "Timlin Way",
            "Topa Ct",
            "Torrel St",
            "Torremolinos Ave",
            "Tousseau Ln",
            "Tracy Pl",
            "Trapani Ave",
            "Trask Ave",
            "Treguboff Ave",
            "Treguboff Ct",
            "Treguboff Ln",
            "Trostad Dr",
            "Trumbull St",
            "Tufts Ave",
            "Tufts Ave",
            "Tulane St",
            "Tulane Way",
            "Turquoise Ave",
            "Twilight Way",
            "U St",
            "Uhlrich Ave",
            "Ullman St",
            "Underwood Ave",
            "Unger Ave",
            "Upton Ct",
            "Upton Dr",
            "Uso Ct",
            "Valenzuela Ave",
            "Valiant Ct",
            "Vallon St",
            "Vance Ct",
            "Vance St",
            "Vande Way",
            "Vassar Ave",
            "Veblem Ave",
            "Venus St",
            "Vercye Ct",
            "Vercye Pl",
            "Vercye St",
            "Verdant Ave",
            "Verona Ave",
            "Vickers Pl",
            "Victor Pl",
            "Victor Way",
            "Victoria Square",
            "Vida Ave",
            "Viking Way",
            "Village Center Dr",
            "Village Ct",
            "Village Dr",
            "Village Pkwy",
            "Village Way",
            "Vincent Ave",
            "Violette Dr",
            "Virginia Blvd",
            "Virgo St",
            "Vista Rd",
            "Vivian Ct",
            "Vivian Dr",
            "Vivian Pl",
            "Voisin Pl",
            "Volco Ct",
            "Volco St",
            "Vollie Ln",
            "Voltaire Way",
            "Volvo Ct",
            "Volvo Dr",
            "Von Braun Way",
            "Vultee Pl",
            "W Lake Dr",
            "W Pebble Blvd",
            "W Point Ave",
            "W Point Blvd",
            "W St",
            "Waggoner Dr",
            "Wald Ct",
            "Walk Ct",
            "Walker Ct",
            "Wallace Way",
            "Walsh Ct",
            "Walter Ct",
            "Walton St",
            "Ward Ct",
            "Waterman St",
            "Wayne St",
            "Weber Ct",
            "Wells Fargo St",
            "Wes St",
            "Western Way",
            "Westmont St",
            "Westmont Way",
            "White Way",
            "Whittle Ct",
            "Whitworth Ave",
            "Wicma Ct",
            "Wildcat Way",
            "Wille Ln",
            "Wilson Dr",
            "Wilton Pl",
            "Winesap Ct",
            "Winey Dr",
            "Wittmeter Ct",
            "Wolf Ct",
            "Wood Ct",
            "Woodward Ave",
            "Wright Dr",
            "Wynn Ave",
            "X St",
            "Xavier Ave",
            "Xenios Ct",
            "Y Ct",
            "York Ave",
            "Young Dr",
            "Yucaipa St",
            "Zade Ct",
            "Zanzibar Pl",
            "Zea Ct",
            "Zito Ct",
            "Zoro Rd"
    };

    // endregion

    public static final String[] TIME_PERIODS = new String[]{
            "2 Weeks",
            "2 Weeks to 1 Month",
            "1 to 2 Months",
            "2 to 3 Months",
            "3 to 6 Months",
            "6 Months to a Year"};

    public static final String[] ALPHABET = new String[]{"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v",
            "w", "x", "y", "z"};

    public static State STATE;


    public static List<Authority> CANDIDATE_ROLE_LIST;
    public static List<Authority> COMPANY_ROLE_LIST;
    public static List<Authority> ADMIN_ROLE_LIST;
    public static List<Authority> CANDIDATE_LOCKED_ROLE_LIST;
    public static List<Authority> COMPANY_LOCKED_ROLE_LIST;

    // endregion

    // region Init data

    public static void createRoles(GenericCrudService genericCrudService) {
        Authority adminRole = (Authority) genericCrudService.save(new Authority("ADMIN"));
        Authority companyRole = (Authority) genericCrudService.save(new Authority("COMPANY"));
        Authority companyLockedRole = (Authority) genericCrudService.save(new Authority("COMPANY_LOCKED"));
        Authority candidateRole = (Authority) genericCrudService.save(new Authority("CANDIDATE"));
        Authority candidateLockedRole = (Authority) genericCrudService.save(new Authority("CANDIDATE_LOCKED"));

        CANDIDATE_ROLE_LIST = new ArrayList<>();
        CANDIDATE_ROLE_LIST.add(candidateRole);

        CANDIDATE_LOCKED_ROLE_LIST = new ArrayList<>();
        CANDIDATE_LOCKED_ROLE_LIST.add(candidateRole);

        COMPANY_ROLE_LIST = new ArrayList<>();
        COMPANY_ROLE_LIST.add(companyRole);

        COMPANY_LOCKED_ROLE_LIST = new ArrayList<>();
        COMPANY_LOCKED_ROLE_LIST.add(companyRole);

        ADMIN_ROLE_LIST = new ArrayList<>();
        ADMIN_ROLE_LIST.add(adminRole);
    }

    public static void createCertifications(GenericCrudService genericCrudService) {
        for (Certifications certifications : soft) {
            certifications = (Certifications) genericCrudService.save(certifications);
        }
    }

    public static void createIndustries(GenericCrudService genericCrudService) {
        for (Industry industry : INDUSTRIES) {
            industry = (Industry) genericCrudService.save(industry);
        }
    }

    public static void createSkills(GenericCrudService genericCrudService) {
        for (Skill skill : SKILLS) {
            skill = (Skill) genericCrudService.save(skill);
        }
    }

    public static void createStates(GenericCrudService genericCrudService) {
        State state = new State("California");
        for (Area area : AREAS) {
            state.setArea(area);
        }
        STATE = (State) genericCrudService.save(state);
    }

    public static void createInitialData(GenericCrudService genericCrudService) {
        createCertifications(genericCrudService);
        createIndustries(genericCrudService);
        createSkills(genericCrudService);
        createStates(genericCrudService);
        createRoles(genericCrudService);
    }

    // endregion

    // region Random data generation
    private static Date randomBirthDate() {
        long decimal = 100000;
        int rand = RANDOM.nextInt((12931488 - 3464640)) + 3464640;
        long result = rand * decimal;
        return new Date(result);
    }

    private static Date randomStartingDate() {
        long decimal = 100000;
        int rand = RANDOM.nextInt((2000)) + 2000;
        long result = rand * decimal;
        return new Date(DateTimeUtils.currentTimeMillis() + result);
    }

    private static String randomTimePeriod() {
        int lim = TIME_PERIODS.length - 1;
        int rand = RANDOM.nextInt(lim);
        return TIME_PERIODS[rand];
    }

    private static int randomHourlyRate() {
        return RANDOM.nextInt(100) + 20;
    }

    private static Address randomAddress() {
        State state = STATE;
        return new Address(
                randomStreet(),
                randomCity(),
                state,
                randomZip());
    }

    private static String randomCity() {
        int lim = CITIES.length - 1;
        int rand = RANDOM.nextInt(lim);
        return CITIES[rand];
    }

    private static String randomStreet() {
        int lim = STREETS.length - 1;
        int rand = RANDOM.nextInt(lim);
        return STREETS[rand] + " " + String.valueOf(randomStreetNumber());
    }

    private static int randomZip() {
        return RANDOM.nextInt(9999) + 9000;
    }

    private static int randomStreetNumber() {
        return RANDOM.nextInt(200) + 1;
    }

    private static List<CandidateSkill> randomSkillsList() {
        List<CandidateSkill> candidateSkills = new ArrayList<>();

        int index = randomIn5();
        while (index != 0) {
            CandidateSkill candidateSkill = randomSkill();
            if (candidateSkills.contains(candidateSkill)) {
                continue;
            }
            candidateSkills.add(candidateSkill);
            --index;
        }
        return candidateSkills;
    }

    private static CandidateSkill randomSkill() {
        int lim = SKILLS.length - 1;
        int rand = RANDOM.nextInt(lim);
        return new CandidateSkill(SKILLS[rand], randomExperienceDuration());
    }

    private static List<Area> randomAreaList() {
        List<Area> areas = new ArrayList<>();
        for (int i = 0; i < 3; i++) {
            int random = RANDOM.nextInt(AREAS.length - 1);
            Area area = AREAS[random];
            if (areas.contains(area)) continue;
            areas.add(area);
        }
        return areas;
    }

    private static int randomExperienceDuration() {
        return RANDOM.nextInt(25) + 1;
    }

    private static int randomIn5() {
        int result = RANDOM.nextInt(4) + 1;
        return result;
    }

    private static List<Certifications> randomAccountingCertifications() {

        List<Certifications> candidateCertifications = new ArrayList<>();
        int index2 = randomIn5();
        while (index2 != 0) {
            Certifications certifications = randomCertifications();
            if (candidateCertifications.contains(certifications)) continue;
            candidateCertifications.add(certifications);
            --index2;
        }
        return candidateCertifications;
    }

    private static List<Address> randomAddresses() {

        List<Address> addresses = new ArrayList<>();
        int index2 = randomIn5();
        while (index2 != 0) {
            addresses.add(randomAddress());
            --index2;
        }
        return addresses;
    }

    private static Certifications randomCertifications() {
        int lim = soft.length - 1;
        int rand = RANDOM.nextInt(lim);
        return soft[rand];
    }

    private static Industry randomIndustry() {
        int lim = INDUSTRIES.length - 1;
        int rand = RANDOM.nextInt(lim);
        return INDUSTRIES[rand];
    }

    private static String randomPhoneNumber() {
        String[] phones = new String[]{
                "1 800 5551212",
                "800 678 1212",
                "8005551212",
                "18005551212",
                "+1800 555 1212 extension65432",
                "800 5551212 ext3333"};
        int lim = phones.length - 1;
        int rand = RANDOM.nextInt(lim);
        return phones[rand];

    }

    public static Candidate createCandidateWithRealEmail(GenericCrudService genericCrudService) {
        Candidate candidate = new Candidate(
                "marta.ginosyan.test1@gmail.com",
                "password1!",
                CANDIDATE_ROLE_LIST,
                true,
                "Marta as candidate",
                randomBirthDate(),
                randomTimePeriod(),
                randomHourlyRate(),
                null,
                randomAddress(),
                randomSkillsList(),
                randomAccountingCertifications(),
                randomAreaList(),
                null,
                randomStartingDate());
        candidate.setApproved(false);
        try {
            candidate = (Candidate) genericCrudService.save(candidate);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return candidate;
    }

    public static Candidate createRandomCandidate(GenericCrudService genericCrudService, String mailInitials) {
        Candidate candidate = new Candidate(
                mailInitials + "@" + mailInitials + "." + "cst",
                "password1!",
                CANDIDATE_LOCKED_ROLE_LIST,
                true,
                "John" + mailInitials + " " + "Smith" + mailInitials,
                randomBirthDate(),
                randomTimePeriod(),
                randomHourlyRate(),
                null,
                randomAddress(),
                randomSkillsList(),
                randomAccountingCertifications(),
                randomAreaList(),
                null,
                randomStartingDate());
        candidate.setApproved(false);
        try {
            candidate = (Candidate) genericCrudService.save(candidate);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return candidate;
    }

    public static void createRandomCandidates(GenericCrudService genericCrudService, int quantity) {
        int indexCount = 0;
        for (int i = 0; i < quantity; i++) {
            createRandomCandidate(genericCrudService, ALPHABET[indexCount] + String.valueOf(i));
            ++indexCount;
            if (indexCount == ALPHABET.length) indexCount = 0;
        }
    }

    public static Company createCompanyWithRealEmail(GenericCrudService genericCrudService) {
        Company company = new Company(
                "marta.ginosyan.files@gmail.com",
                "password1!",
                COMPANY_ROLE_LIST,
                true,
                "Marta as Company",
                randomIndustry(),
                randomPhoneNumber(),
                randomAddress(),
                randomCompanyStaff(),
                randomAddresses()
        );
        company.setApproved(false);
        try {
            company = (Company) genericCrudService.save(company);
            temp = false;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return company;
    }

    public static Company createRandomCompany(GenericCrudService genericCrudService, String mailInitials) {

        Company company = new Company(
                mailInitials + "@" + mailInitials + "." + "com",
                "password1!",
                COMPANY_LOCKED_ROLE_LIST,
                true,
                "Cool" + mailInitials + " " + "Company" + mailInitials,
                randomIndustry(),
                randomPhoneNumber(),
                randomAddress(),
                randomCompanyStaff(),
                randomAddresses()
        );
        company.setApproved(false);
        try {
            company = (Company) genericCrudService.save(company);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return company;
    }

    public static void createRandomCompanies(GenericCrudService genericCrudService, int quantity) {
        int indexCount = 0;
        for (int i = 0; i < quantity; i++) {
            createRandomCompany(genericCrudService, ALPHABET[indexCount] + String.valueOf(i));
            ++indexCount;
            if (indexCount == ALPHABET.length) indexCount = 0;
        }
    }


    public static CompanyStaff randomCompanyStaff() {
        return new CompanyStaff(
                "John Smith",
                randomPhoneNumber(),
                "staff@staff.com"
        );
    }

    /**
     * Creates random conversation between given users with pair length of given value.
     *
     * @return created conversation.
     */
    public static Conversation randomConversation(
            boolean accepted,
            int nextInt,
            String companyUsername,
            String candidateUsername,
            CompanyService companyService,
            CandidateService candidateService,
            CommunicationService messagingService) {
        Candidate candidate = candidateService.findByUsername(candidateUsername);
        Company company = companyService.findByUsername(companyUsername);
        Conversation conversation = new Conversation(company, candidate);
        Interview interview = createInterview();
        try {
            Message companyInitialMessage = new Message(
                    "Invitation for Interview",
                    "We would like to meet you in our office.",
                    true,
                    company,
                    candidate,
                    conversation);
            interview.setCompanyMessage(companyInitialMessage);
            interview.setRejected(false);
            interview.setAccepted(false);
            conversation.setInterview(interview);
            conversation = messagingService.sendInvitationForInterview(conversation);
            if (nextInt < 1) return conversation;
            Thread.sleep(DELAY);
            Message candidateInitialMessage = new Message(
                    "Response to invitation",
                    "Ok I'll come.",
                    true,
                    candidate,
                    company,
                    conversation);

            interview.setAccepted(accepted);
            interview.setCandidateResponse(candidateInitialMessage);
            conversation.setInterview(interview);
            conversation = messagingService.responseToInvitationForInterview(conversation, !accepted);

            for (int i = 0; i < nextInt; i++) {

                if (i == nextInt - 1) {
                    Thread.sleep(DELAY);
                    Message companyLastMessage =
                            new Message("From company, N " + i,
                                    "This is a last letter from company to candidate number " + i,
                                    false,
                                    company,
                                    candidate,
                                    conversation);
                    conversation.setLastMessage(companyLastMessage);
                    conversation = messagingService.updateMessage(conversation);

                    Thread.sleep(DELAY);
                    Message candidateLastMessage =
                            new Message(
                                    "From candidate, N " + i,
                                    "This is a last letter from candidate to company number " + i,
                                    false,
                                    candidate,
                                    company,
                                    conversation);
                    conversation.setLastMessage(candidateLastMessage);
                    conversation = messagingService.updateMessage(conversation);
                    continue;
                }

                Thread.sleep(DELAY);
                Message companyMessage =
                        new Message("From company, N " + i,
                                "This is a letter from company to candidate number " + i,
                                true,
                                company,
                                candidate,
                                conversation);
                conversation.setLastMessage(companyMessage);
                conversation = messagingService.updateMessage(conversation);

                Thread.sleep(DELAY);
                Message candidateMessage =
                        new Message(
                                "From candidate, N " + i,
                                "This is a letter from candidate to company number " + i,
                                true,
                                candidate,
                                company,
                                conversation);
                conversation.setLastMessage(candidateMessage);
                conversation = messagingService.updateMessage(conversation);
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        return conversation;
    }

    public static Interview createInterview() {

        Interview interview = new Interview();
        interview.setInterviewDate(randomLocalDateAndTime());
        interview.setInterviewDateOptional1(randomLocalDateAndTime());
        interview.setInterviewDateOptional2(randomLocalDateAndTime());
        interview.setLocation(randomAddress().toString());
        interview.setRejected(false);
        interview.setAccepted(false);
        return interview;
    }

    public static LocalDateTime randomLocalDateAndTime() {
        return LocalDateTime.now()
                .plusDays(randomIn5());
    }


    public static Administrator createAdmin(GenericCrudService genericCrudService) {
        Administrator administrator = new Administrator(
                "admin@admin.com",
                "password1!",
                true,
                ADMIN_ROLE_LIST,
                randomAddress(),
                "Admin Adminyan"
        );
        administrator = (Administrator) genericCrudService.save(administrator);
        return administrator;

    }


    // endregion
}
